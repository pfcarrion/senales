import sys
import os
import django
from django.conf import settings
from telethon import TelegramClient, events
import logging
import re
from datetime import datetime
import json
from django.utils.timezone import now
from signals.models import Senal  # Aseg√∫rate de que el modelo est√° correctamente importado

# Verificar rutas y configuraci√≥n inicial
print("sys.path antes:", sys.path)
sys.path.append('/opt/senales')  # Ruta del proyecto Django
print("sys.path despu√©s:", sys.path)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'senales.settings')  # Configuraci√≥n de Django
print("DJANGO_SETTINGS_MODULE:", os.getenv('DJANGO_SETTINGS_MODULE'))

# Configurar Django
django.setup()

# Confirmar que el modelo se import√≥ correctamente
print("Modelo Senal importado correctamente")

# Configurar el archivo de se√±ales
SE√ëALES_HTML_PATH = "/opt/senales/senales/signals/static/senales/senales.json"

# Configuraci√≥n b√°sica de Telegram
api_id = settings.TELEGRAM_API_ID
api_hash = settings.TELEGRAM_API_HASH
phone_number = settings.TELEGRAM_PHONE_NUMBER

# Inicializar cliente de Telethon
client = TelegramClient('nueva_name', api_id, api_hash)
client.start(phone=phone_number)
logging.basicConfig(level=logging.INFO)

# Diccionario de direcciones
direccion_map = {
    'call': 'ARRIBA',
    'put': 'BAJO',
    'arriba': 'ARRIBA',
    'bajo': 'BAJO',
    '‚¨ÜÔ∏è': 'ARRIBA',
    '‚¨áÔ∏è': 'BAJO',
    'up': 'ARRIBA',
    'down': 'BAJO'
}

# Funci√≥n para cargar formatos desde un archivo
def cargar_formatos(archivo):
    patrones = []
    try:
        with open(archivo, 'r', encoding='utf-8') as f:
            formato_actual = None
            patron_actual = ""
            for line in f:
                line = line.strip()
                if line.startswith('#Formato'):
                    if formato_actual and patron_actual:
                        patrones.append((formato_actual, patron_actual))
                    formato_actual = line
                    patron_actual = ""
                elif line.startswith('‚Ä¢') or line.startswith('üí∂'):
                    patron_actual += line + r"\s*"
            if formato_actual and patron_actual:
                patrones.append((formato_actual, patron_actual))
        logging.info(f"Formatos cargados: {patrones}")
    except Exception as e:
        logging.error(f"Error al cargar formatos: {e}")
    return patrones

# Cargar formatos desde el archivo
archivo_formatos = '/opt/senales/senales/management/commands/formatodegrupos.txt'
formatos = cargar_formatos(archivo_formatos)

# Expresiones regulares
regex_para_formato = re.compile(
    r"([A-Z]{3}\/[A-Z]{3}|[A-Z]{6}(?:-OTC)?)\s*(‚¨ÜÔ∏è|‚¨áÔ∏è|arriba|bajo|up|down|call|put)\s*(\d+)\s*MINUTES?",
    re.IGNORECASE
)
regex_tiempos = re.compile(
    r"(M\d+|m\d+|\d+\s*MINUTOS?|\d+\s*MINUTES?|caducidad de \d+ minutos|vencimiento: m\d+|time:\s*\d+\s*min)",
    re.IGNORECASE
)

# Funci√≥n para obtener se√±ales recientes (m√°ximo 5 minutos de vida)
def obtener_senales_recientes():
    tiempo_actual = now()
    se√±ales = []

    # Consulta las se√±ales creadas en los √∫ltimos 5 minutos
    from senales.models import Senal  # Importa el modelo necesario
    senales_recientes = Senal.objects.filter(
        horario_envio__gte=tiempo_actual - datetime.timedelta(minutes=5)
    ).order_by("-horario_envio")  # Ordenar por la m√°s reciente primero

    # Convertir se√±ales a un formato JSON
    for se√±al in se√±ales_recientes:
        se√±ales.append({
            "divisa": se√±al.divisa,
            "direccion": se√±al.direccion,
            "tiempo": se√±al.tiempo,
            "timestamp": se√±al.horario_envio.strftime("%Y-%m-%d %H:%M:%S"),
        })

    return se√±ales

# Funci√≥n para guardar las se√±ales recientes en un archivo JSON
def guardar_senales_html(senales):
    try:
        os.makedirs(os.path.dirname(SENALES_HTML_PATH), exist_ok=True)
        with open(SENALES_HTML_PATH, "w", encoding="utf-8") as file:
            json.dump(senales, file, ensure_ascii=False, indent=4)
        logging.info(f"Se√±ales guardadas exitosamente en {SENALES_HTML_PATH}")
    except Exception as e:
        logging.error(f"Error al guardar se√±ales: {e}")

# Funci√≥n para procesar mensajes
def procesar_mensaje(mensaje, horario_envio):
    senal_formateada = {'Proceso': 0}

    # Buscar coincidencia con alg√∫n formato
    for formato, patron in formatos:
        if re.search(patron, mensaje, re.IGNORECASE):
            logging.info(f"Mensaje coincide con {formato}: {mensaje}")
            senal_formateada['Proceso'] = 1
            break

    # Si se encuentra un mensaje v√°lido, actualizar se√±ales y generar HTML
    if senal_formateada["Proceso"] == 1:
        # Guardar la nueva se√±al en la base de datos
        match = regex_para_formato.search(mensaje)
        tiempo_match = regex_tiempos.search(mensaje)

        if match and tiempo_match:
            moneda = match.group(1)
            direccion = direccion_map.get(match.group(2).lower(), "DESCONOCIDO")
            tiempo = tiempo_match.group(0)

            # Validar si la se√±al ya existe
            if not Senal.objects.filter(
                divisa=moneda,
                direccion=direccion,
                tiempo=tiempo,
                horario_envio=horario_envio
            ).exists():
                # Crear la nueva se√±al
                nueva_senal = Senal(
                    divisa=moneda,
                    direccion=direccion,
                    tiempo=tiempo,
                    horario_envio=horario_envio,
                    proceso=1
                )
                nueva_senal.save()
                logging.info(f"Nueva se√±al guardada: {moneda}, {direccion}, {tiempo}")

        # Actualizar las se√±ales recientes
        senales = obtener_senales_recientes()
        guardar_senales_html(senales)

        # Actualizar se√±ales en el archivo JSON
        actualizar_se√±ales_json()
        logging.info(f"Se√±al guardada: {moneda}, {direccion}, {tiempo}")

    else:
        logging.warning("No se encontr√≥ ning√∫n formato v√°lido en el mensaje.")


# Funci√≥n para actualizar se√±ales en archivo JSON
def actualizar_se√±ales_json():
    se√±ales = Senal.objects.all().order_by('-horario_envio')[:20]  # √öltimas 20 se√±ales
    se√±ales_dict = [
        {
            "divisa": senal.divisa,
            "direccion": senal.direccion,
            "tiempo": senal.tiempo,
            "horario_envio": senal.horario_envio.strftime('%Y-%m-%d %H:%M:%S')
        }
        for senal in se√±ales
    ]

    with open(SE√ëALES_HTML_PATH, 'w', encoding='utf-8') as f:
        json.dump(se√±ales_dict, f, indent=4)
    logging.info("Se√±ales actualizadas en el archivo JSON.")


# Manejar mensajes de Telegram
async def main():
    try:
        await client.start(phone=phone_number)
        logging.info("Conexi√≥n exitosa con Telegram.")
    except Exception as e:
        logging.error(f"Error al conectar: {e}")

    @client.on(events.NewMessage(chats=[
        '@alejandrosinalesgratis',
        '@pocketoptiongratis500',
        '@pocketoptiongratis50',
        '@Amarearnings',
        '@julia_signal',
        '@dashatrade',
        '@freesignalkami',
        '@SenalesGratisQuotex',
        -1001963256084,
        -1002119599326
    ]))
    async def handler(event):
        mensaje = event.message.message
        horario_envio = event.message.date  # Capturar la hora exacta del mensaje
        logging.info(f"Mensaje recibido: {mensaje} (Hora: {horario_envio})")

        se√±al_formateada = procesar_mensaje(mensaje, horario_envio)

        if se√±al_formateada:
            logging.info(f"Se√±al guardada en la base de datos.")
        else:
            logging.warning("No se encontr√≥ ninguna l√≠nea relevante para procesar.")

    logging.info("Escuchando mensajes... Presiona Ctrl+C para detener.")
    await client.run_until_disconnected()

# Ejecutar el cliente de Telethon
with client:
    client.loop.run_until_complete(main())
